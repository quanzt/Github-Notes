

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

# pool:
#   vmImage: 'ubuntu-16.04'

# strategy:
#   matrix:
#     ubuntu14:
#       containerImage: ubuntu:14.04
#     ubuntu16:
#       containerImage: ubuntu:16.04
#     ubuntu18:
#       containerImage: ubuntu:18.04

# container: $[ variables['containerImage'] ]

# pool:
#   vmImage: 'ubuntu-16.04'

# container: ubuntu:16.04

# pool:
#   vmImage: 'windows-2019'

# container: mcr.microsoft.com/windows/servercore:ltsc2019

# pool:
#   vmImage: 'Ubuntu-16.04'

# variables:
#   imageName: 'pipelines-javascript-docker'

# resources:
#   containers:
#   - container: u14
#     image: ubuntu:14.04

#   - container: u16
#     image: ubuntu:16.04

#   - container: u18
#     image: ubuntu:18.04

# jobs:
# - job: RunInContainer
#   pool:
#     vmImage: 'ubuntu-16.04'

#   strategy:
#     matrix:
#       ubuntu14:
#         containerResource: u14
#       ubuntu16:
#         containerResource: u16
#       ubuntu18:
#         containerResource: u18

#   container: $[ variables['containerResource'] ]
pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: 'pipelines-javascript-docker'

steps:
  - task: Docker@2
    displayName: Build an image
    inputs:
      repository: $(imageName)
      command: build
      Dockerfile: app/Dockerfile
  # - task: Docker@2
  #   displayName: Build an image
  #   inputs:
  #     repository: $(imageName)
  #     command: build
  #     Dockerfile: app/Dockerfile
  # - script: printenv
  - script: echo Hello, world!
    displayName: 'Run a one-line script'

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: 'Run a multi-line script'

  # Starter pipeline
  - task: ApplicationSecurity@1
    inputs:
      AppSecTestService: 'prod account'
      applications: '2433ac8c-4059-e811-9423-002590ac753d'
      scanname: 'quan1scan'
      scantype: 'static'
  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: '**/*.sln'
      feedsToUse: 'select'

    