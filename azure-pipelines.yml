

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

# pool:
#   vmImage: 'ubuntu-16.04'

# strategy:
#   matrix:
#     ubuntu14:
#       containerImage: ubuntu:14.04
#     ubuntu16:
#       containerImage: ubuntu:16.04
#     ubuntu18:
#       containerImage: ubuntu:18.04

# container: $[ variables['containerImage'] ]

pool:
  vmImage: 'ubuntu-16.04'

container: ubuntu:16.04

# pool:
#   vmImage: 'macOS-latest'

# container: 'macOS-latest'

# pool:
#   vmImage: 'windows-2019'

# container: mcr.microsoft.com/windows/servercore:ltsc2019

# pool:
#   vmImage: 'Ubuntu-16.04'

# variables:
#   imageName: 'pipelines-javascript-docker'

# resources:
#   containers:
#   - container: u14
#     image: ubuntu:14.04

#   - container: u16
#     image: ubuntu:16.04

#   - container: u18
#     image: ubuntu:18.04

# jobs:
# - job: RunInContainer
#   pool:
#     vmImage: 'ubuntu-16.04'

#   strategy:
#     matrix:
#       ubuntu14:
#         containerResource: u14
#       ubuntu16:
#         containerResource: u16
#       ubuntu18:
#         containerResource: u18

#   container: $[ variables['containerResource'] ]



steps:    
      # curl https://www.google.com/
  - bash: |
      DOWNLOAD_URL="https://www.google.com/"      
      INSTALL_DIR="/usr/local/bin"
      apt-get -qq update
      apt-get -qq -y install curl
      
      # apt-get update
      # apt-get install curl
      
      curl https://www.google.com/ 
      
      # curl -o "$INSTALL_DIR/test1" -L --progress-bar $DOWNLOAD_URL      
      # chmod +rx "$INSTALL_DIR/test1"
      
      # curl -sL https://www.google.com/ | bash

  - script: echo Hello, world!
    displayName: 'Run a one-line script'

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: 'Run a multi-line script'

  # - script: curl -O "https://cloud.appscan.com/api/SCX/StaticAnalyzer/SAClientUtil?os=linux"
  


  # - task: CmdLine@2
  #   inputs:
  #     script: |
  #       curl https://www.google.com/
        
  #       # curl -i "https://cloud.appscan.com/api/SCX/StaticAnalyzer/SAClientUtil?os=linux"
  #       # Write your commands here
        
  #       ls -l

  # Bash
# Run a Bash script on macOS, Linux, or Windows
  # - task: Bash@3
  #   inputs:
  #     #targetType: 'filePath' # Optional. Options: filePath, inline
  #     #filePath: # Required when targetType == FilePath
  #     #arguments: # Optional
  #     #script: '# echo Hello world' # Required when targetType == inline
  #     # script: "curl -X POST --data-urlencode 'payload={\"text\":
  #     # \"A new version has been deployed to production.\"}' 
  #     # https://cloud.appscan.com/api/SCX/StaticAnalyzer/SAClientUtil?os=linux"
  #     script: curl -O "https://cloud.appscan.com/api/SCX/StaticAnalyzer/SAClientUtil?os=linux"
  #     #workingDirectory: # Optional
  #     #failOnStderr: false # Optional
  #     #noProfile: true # Optional
  #     #noRc: true # Optional


  # Starter pipeline
  # - task: ApplicationSecurity@1
  #   inputs:
  #     AppSecTestService: 'prod account'
  #     applications: '2433ac8c-4059-e811-9423-002590ac753d'
  #     scanname: 'quan1scan'
  #     scantype: 'static'
    


#     # Maven
# # Build your Java project and run tests with Apache Maven.
# # Add steps that analyze code, save build artifacts, deploy, and more:
# # https://docs.microsoft.com/azure/devops/pipelines/languages/java

# trigger:
# - master

# pool:
#   vmImage: 'ubuntu-latest'

# container:  maven:3.6.1-jdk-11

# steps:
# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your commands here
      
#       ls -l

# - task: ApplicationSecurity@1
#   inputs:
#     AppSecTestService: 'Karl'
#     applications: '2433ac8c-4059-e811-9423-002590ac753d'
#     scanname: 'TestPipeline'
#     scantype: 'static'